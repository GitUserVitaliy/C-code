#include <iostream>
#include <ctime>

using namespace std;

float fill(float*array, int size)
{
	for (int i = 0; i < size; i++)
	{
		array[i] = rand() % 100 - 50;
	}
	return *array;
}

void print(float*array, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << array[i] << endl;
	}
}

void sort(float* mass, int n)
{

	for (int i = 1; i < n; ++i)
	{
		for (int r = 0; r < n - i; r++)
		{
			if (mass[r] < mass[r + 1])
			{
				swap(mass[r], mass[r + 1]);
			}
		}
	}
}

int main()
{
	setlocale(LC_ALL, "Russian");
	srand(time(NULL));
	int size = 0;
	int composition = 1;
	int pos_max = 0, pos_min = 0;
	int summa = 0;
	cout << "Enter size of Array." << endl;
	cin >> size;
	float* array = new float[size];
	fill(array, size);
	print(array, size);
	for (int i = 0; i < size; i++)
	{
		if (array[i] < 0)
		{
			composition = composition * array[i];
		}
	}
	pos_max = 0;
	for (int i = 0; i < size; i++)
	{
		if (array[pos_max] < array[i])
		{
			pos_max = i;
		}
	}
	pos_min = 0;
	for (int i = 0; i < size; i++)
	{
		if (array[pos_min] > array[i])
		{
			pos_min = i;
		}
	}
	if (pos_max > pos_min)
	{
		for (int i = pos_min + 1; i < pos_max ; i++)
		{
			summa = summa + array[i];
		}
	}
	if (pos_min > pos_max)
	{
		for (int i = pos_max + 1; i < pos_min; i++)
		{
			summa = summa + array[i];
		}
	}
	sort(array, size);
	cout << "Sorted array" << endl;
	print(array, size);
	cout << "Composition: " << composition << endl;
	cout << "Pos_min: " << pos_min << endl;
	cout << "Pos_max: " << pos_max << endl;
	cout << "Summa: " << summa << endl;
	delete[] array;
	system("pause");
	return 0;
}

#include <iostream>
#include <ctime>

using namespace std;

void print(int* m, int n)
{
	for (int i = 0; i < n; i++)
	{
		cout << m[i] << "-" << i + 1 << endl;
	}
}

void print_df()
{
	cout << "1.Fill ." << endl;
	cout << "2.print." << endl;
	cout << "3.Sort." << endl;
	cout << "4.cout max." << endl;
	cout << "5.New element." << endl;
	cout << "6.delete element." << endl;
	cout << "0.Exit." << endl;
}

void fill(int* mas, int n)
{
	for (int i = 0; i < n; i++)
	{
		mas[i] = rand() % 100 - 50;
	}
}

void sort(int* mass, int n)
{
	int temp = 0;
	for (int i = 1; i < n; ++i)
	{
		for (int r = 0; r < n - i; r++)
		{
			if (mass[r] < mass[r + 1])
			{
				swap(mass[r], mass[r + 1]);
			}
		}
	}
}

int max_array(int* mas, int n)
{
	int max = mas[0];
	for (int i = 1; i < n; i++)
	{
		if (max <= mas[i])
		{
			max = mas[i];
		}
	}
	return max;
}

int main()
{
	srand(time(NULL));
	int m = 0;
	int answ = 0;
	int an = 1;
	cout << "Enter size" << endl;
	cin >> m;
	cout << endl;
	int* mas = new int[m];
	while (true)
	{
		if (an == 1)
		{
			print_df();
			cin >> answ;
			switch (answ)
			{
			case 1:
			{
				cout << "@Filled array@" << endl;
				fill(mas, m);
				break;
			}
			case 2:
			{
				cout << "@Array: " << endl;
				print(mas, m);
				break;
			}
			case 3:
			{
				cout << "@Sorted array: " << endl;
				sort(mas, m);
				break;
			}
			case 4:
			{
				cout << "@Maximum: " << max_array(mas, m) << endl;
				break;
			}
			case 5:
			{
				int* array = new int[m+1];
				for (int i = 0; i < m; i++)
				{
					array[i] = mas[i];
				}
				cout << "Enter new element" << endl;
				cin >> array[m];
				delete[] mas;
				mas = array;
				m++;
				break;
			}
			case 6:
			{
				int* array = new int[m - 1];
				for (int i = 0; i < m-1; i++)
				{
					array[i] = mas[i];
				}
				delete[] mas;
				mas = array;
				m--;
				break;
			}
			case 0:
			{
				cout << "@Exit@" << endl;
				return 0;
			}
			default:
			{
				break;
			}
			}
			answ = 0;
		}
		if (an == 0)
		{
			break;
		}
	}

	delete[] mas;
	system("pause");
	return 0;
}